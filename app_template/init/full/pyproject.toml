[project]
name = "example-project"
description = "" # TODO
version = "0.1.0"
readme = "readme.md"
package-mode = false
authors = [
  # TODO
]
classifiers = [
  "Private :: Do not Upload",
]
requires-python = "~=3.12"
dependencies = [
  "djgram",
  # Работа с telegram
  "aiogram>=3.17.0",
  # Работа с базой данных
  "alembic>=1.14.1",
  "asyncpg>=0.30.0",
  "redis>=5.2.1",
  "hiredis>=3.1.0",
  # Прочее
  "coloredlogs>=15.0.1",
  "python-dotenv>=1.0.1",
  "python-json-logger>=3.2.1",
]

[dependency-groups]
dev = [
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "ruff>=0.9.6",
]

[tool.uv.sources]
djgram = { path = "djgram" }

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "8.3"
python_files = [
  "tests.py",
  "test_*.py",
]
testpaths = [
  "tests",
]

# ==== ruff ====
[tool.ruff]
# Many copied from dewfault config from documentation https://docs.astral.sh/ruff/configuration/
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "*.egg",
  "__pycache__",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN002", "ANN003", "ANN204",
  "D100", "D104", "D105", "D200", "D202", "D205", "D212", "D415",
  "EM101", "EM102", "INP001", "TRY003",
  "RUF001", "RUF002", "RUF003", "FIX", "TD",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"apps/*/admin.py" = ["ARG002", "D101", "D102", "RUF012"]
"apps/*/dialogs/callbacks.py" = ["ANN201", "ARG001", "D103", "TID252"]
"apps/*/dialogs/dialogs.py" = ["TID252"]
"apps/*/dialogs/getters.py" = ["ANN201", "ARG001", "D103", "TID252"]
"apps/*/handlers.py" = ["ANN201", "ARG001"]
"apps/*/models.py" = ["D101"]
"migrations/env.py" = ["D103"]
"migrations/versions/*.py" = ["D103"]
"tests/**/*.py" = ["ANN201", "D101", "D102"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 8.
max-complexity = 8

[tool.ruff.lint.isort]
default-section = "third-party"
known-first-party = []
split-on-trailing-comma = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

# ==== pyright ====
[tool.pyright]
exclude = [
  ".mypy_cache",
  "**/__pycache__",
  "dev",
  ".venv",
  "venv",
  "migrations/env.py",
]
